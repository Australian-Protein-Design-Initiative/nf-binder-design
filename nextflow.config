manifest {
    name            = 'nf-binder-design'
    author          = '''Andrew Perry'''
    homePage        = 'https://github.com/Australian-Protein-Design-Initiative/nf-binder-design'
    description     = '''Protein binder design pipeline'''
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '0.1.4'
    defaultBranch   = 'main'
// doi             = 'TBD'
}

params {
    // GPU-related parameters used across multiple modules
    require_gpu = true
    gpu_devices = ''
    gpu_allocation_detect_process_regex = '(python.*/app/dl_binder_design/af2_initial_guess/predict\\.py|python.*/app/BindCraft/bindcraft\\.py|boltz predict|python.*/app/RFdiffusion/scripts/run_inference\\.py)'
}

process {
    executor = 'slurm'
    stageInMode = 'symlink'
    // errorStrategy = 'retry'
    maxRetries = 0
    cache = 'lenient'

    withName: GET_CONTIGS {
        //container = params.containers.get_contigs
        executor = 'local'
    }

    withName: RENUMBER_RESIDUES {
        //container = params.containers.renumber_residues
        executor = 'local'
    }

    withName: FILTER_DESIGNS {
        executor = 'local'
    }

    withName: COMBINE_SCORES {
        //container = params.containers.combine_scores
        executor = 'local'
    }

    withName: RFDIFFUSION {
        //container = params.containers.rfdiffusion
        accelerator = 1
        time = 24.hours

        memory = '8g' // '8g' is probably enough
        cpus = 2
    }

    withName: RFDIFFUSION_PARTIAL {
        //container = params.containers.rfdiffusion
        accelerator = 1
        time = 24.hours

        memory = '8g' // '8g' is probably enough
        cpus = 2
    }

    withName: DL_BINDER_DESIGN_PROTEINMPNN {
        //container = params.containers.dl_binder_design_proteinmpnn

        // Since this is effectively CPU only and quick, we probably can also just
        // run it on the local node
        //accelerator = 1

        time = 30.minutes
        memory = '4g'
        cpus = 1
    }

    withName: AF2_INITIAL_GUESS {
        //container = params.containers.af2_initial_guess

        accelerator = 1
        time = 30.minutes
        memory = '16g'
        cpus = 4
    }

    withName: CREATE_BOLTZ_YAML {
        executor = 'local'
    }

    withName: PARSE_BOLTZ_CONFIDENCE_JSON {
        executor = 'local'
    }

    withName: MMSEQS_COLABFOLDSEARCH {
        time = 4.hours
        memory = '32g'
        cpus = 8
    }

    withName: BOLTZ {
        accelerator = 1
        time = 2.hours
        memory = '8g'
        cpus = 2

    // if using CPU only
    // ext.args = "--accelerator cpu"
    }

    withName: BINDCRAFT_CREATE_SETTINGS {
        executor = 'local'
    }

    withName: BINDCRAFT {
        accelerator = 1
        time = 2.hours
        memory = '16g'
        cpus = 8
    }
}

// Apptainer specific settings
apptainer {
    enabled = true
    autoMounts = true
    pullTimeout = 3.hours
    // --nv to enable NVIDIA GPU support
    // We add -B ${HOME} to ensure the home directory is available (since Nextflow now uses --no-home by default)
    // The alternative is to set the NXF_APPTAINER_HOME_MOUNT=true environment variable
    runOptions = '--nv --cleanenv -B ${HOME}'
    // runOptions = '--nv -B ${projectDir}/models/af2_initial_guess:/app/dl_binder_design/af2_initial_guess/model_weights'
}

docker {
    enabled = false

    // --gpus all to enable NVIDIA GPU support
    // enabled = true
    runOptions = '--gpus all'
}

profiles {
    local {
        executor {
            name = 'local'
            // this should be overridden for workstations with multiple GPUs to allow more than
            // one simultaneous task.
            queueSize = 1
            pollInterval = '30 sec'
            submitRateLimit = '1/10sec'
        }
        process {
            executor = 'local'
            stageInMode = 'symlink'
            maxRetries = 0
            cache = 'lenient'
        }
    }
    slurm {
        executor {
            name = 'slurm'
            queueSize = 900
            pollInterval = '30 sec'
            queueStatInterval = '10m'
        }
        process {
            executor = 'slurm'
            stageInMode = 'symlink'
            // errorStrategy = 'retry'
            maxRetries = 0
            cache = 'lenient'
        }
    }
    hq {
        executor {
            name = 'hq'
            queueSize = 900
            pollInterval = '5 sec'
            submitRateLimit = '1/10sec'
        }
        process {
            executor = 'hq'
            stageInMode = 'symlink'
            maxRetries = 0
            cache = 'lenient'
        }
    }
}
