params {
    // Container paths
    containers {
        rfdiffusion = "containers/rfdiffusion_cuda11-b44206a.sif"
        // rfdiffusion = "containers/rfdiffusion_pytorch2407-weights-b44206a.sif"
        silenttools = "containers/proteinmpnn_fastrelax_latest.sif"
        dl_binder_design_proteinmpnn = "containers/proteinmpnn_fastrelax_latest.sif"
        af2_initial_guess = "containers/af2_initial_guess_nv-cuda12.sif"
    }
}

def random_choice(choices) {
    return choices[new Random().nextInt(choices.size())]
}

executor {
    $slurm {
      queueSize = 200
      pollInterval = '30 sec'
      queueStatInterval = '10m'
    }
}

process {
    executor = 'slurm'
    stageInMode = 'symlink'
    // errorStrategy = 'retry'
    maxRetries = 0
    cache = 'lenient'

    withName: RFDIFFUSION {
        container = params.containers.rfdiffusion
        accelerator = 1
        time = 24.hours

        memory = '8g' // '8g' is probably enough
        cpus = 2
    }
    
    withName: SILENT_FROM_PDBS {
        container = params.containers.silenttools
    }
    
    withName: DL_BINDER_DESIGN_PROTEINMPNN {
        container = params.containers.dl_binder_design_proteinmpnn
        
        // Since this is effectively CPU only and quick, we probably can also just
        // run it on the local node
        //accelerator = 1

        // Comment this to submit to the queue rather than run locally
        executor = 'local'

        time = 30.minutes
        memory = '4g'
        cpus = 1
    }
    
    withName: AF2_INITIAL_GUESS {
        container = params.containers.af2_initial_guess

        accelerator = 1
        time = 30.minutes
        memory = '16g'
        cpus = 4
    }
}

// Apptainer specific settings
apptainer {
    enabled = true
    autoMounts = true
    // --nv to enable NVIDIA GPU support
    runOptions = "--nv -B ${projectDir}/models/af2_initial_guess:/app/dl_binder_design/af2_initial_guess/model_weights"
}

docker {
    // --gpus all to enable NVIDIA GPU support
    runOptions = '--gpus all'
}

profiles {
    local {
        executor {
            name = 'local'
            queueSize = 32
            pollInterval = '30 sec'
        }
        process {
            executor = 'local'
            stageInMode = 'symlink'
            errorStrategy = 'retry'
            maxRetries = 1
            cache = 'lenient'
        }
    }
}

// Include platform specific settings / overrides
// includeConfig 'conf/mlerp.config'
