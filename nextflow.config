manifest {
    name            = 'nf-binder-design'
    author          = """Andrew Perry"""
    homePage        = 'https://github.com/Australian-Protein-Design-Initiative/nf-binder-design'
    description     = """Protein binder design pipeline"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '0.1'
    // doi             = 'TBD'
}

params {
    models_basepath = "${projectDir}/models"
    container_basepath = "${projectDir}/containers"
    // Container paths
    containers {
        //rfdiffusion = "containers/rfdiffusion_cuda11-b44206a.sif"
        rfdiffusion = "${container_basepath}/rfdiffusion_pytorch2407-weights-b44206a.sif"
        silenttools = "${container_basepath}/proteinmpnn_fastrelax_latest.sif"
        dl_binder_design_proteinmpnn = "${container_basepath}/proteinmpnn_fastrelax_latest.sif"
        af2_initial_guess = "${container_basepath}/af2_initial_guess_nv-cuda12.sif"
        get_contigs = "${container_basepath}/proteinmpnn_fastrelax_latest.sif"
        renumber_residues = "${container_basepath}/proteinmpnn_fastrelax_latest.sif"
        combine_scores = "${container_basepath}/rfdiffusion_pytorch2407-weights-b44206a.sif"

        // get_contigs = "ghcr.io/australian-protein-design-initiative/containers/proteinmpnn_fastrelax:latest"
        // renumber_residues = "ghcr.io/australian-protein-design-initiative/containers/proteinmpnn_fastrelax:latest"
        // silenttools = "ghcr.io/australian-protein-design-initiative/containers/proteinmpnn_fastrelax:latest"
        // rfdiffusion = "ghcr.io/australian-protein-design-initiative/containers/rfdiffusion:pytorch2407-weights-b44206a"
        // dl_binder_design_proteinmpnn = "ghcr.io/australian-protein-design-initiative/containers/proteinmpnn_dl_binder_design:latest"
        // af2_initial_guess = "ghcr.io/australian-protein-design-initiative/containers/af2_initial_guess:nv-cuda12"
        // combine_scores = "ghcr.io/australian-protein-design-initiative/containers/rfdiffusion:pytorch2407-weights-b44206a"
    }
}

process {
    executor = 'slurm'
    stageInMode = 'symlink'
    // errorStrategy = 'retry'
    maxRetries = 0
    cache = 'lenient'

    withName: GET_CONTIGS {
        container = params.containers.get_contigs
        executor = 'local'
    }

    withName: RENUMBER_RESIDUES {
        container = params.containers.renumber_residues
        executor = 'local'
    }

    withName: COMBINE_SCORES {
        container = params.containers.combine_scores
        executor = 'local'
    }

    withName: RFDIFFUSION {
        container = params.containers.rfdiffusion
        accelerator = 1
        time = 24.hours

        memory = '8g' // '8g' is probably enough
        cpus = 2
    }

    withName: RFDIFFUSION_PARTIAL {
        container = params.containers.rfdiffusion
        accelerator = 1
        time = 24.hours

        memory = '8g' // '8g' is probably enough
        cpus = 2
    }
    
    withName: SILENT_FROM_PDBS {
        container = params.containers.silenttools
    }
    
    withName: DL_BINDER_DESIGN_PROTEINMPNN {
        container = params.containers.dl_binder_design_proteinmpnn
        
        // Since this is effectively CPU only and quick, we probably can also just
        // run it on the local node
        //accelerator = 1

        // Comment this to submit to the queue rather than run locally
        executor = 'local'

        time = 30.minutes
        memory = '4g'
        cpus = 1
    }
    
    withName: AF2_INITIAL_GUESS {
        container = params.containers.af2_initial_guess

        accelerator = 1
        time = 30.minutes
        memory = '16g'
        cpus = 4
    }
}

// Apptainer specific settings
apptainer {
    enabled = true
    autoMounts = true
    // --nv to enable NVIDIA GPU support
    // runOptions = "--nv -B ${projectDir}/models/af2_initial_guess:/app/dl_binder_design/af2_initial_guess/model_weights"
}

docker {
    // --gpus all to enable NVIDIA GPU support
    runOptions = '--gpus all'
}

profiles {
    local {
        executor {
            name = 'local'
            queueSize = 32
            pollInterval = '30 sec'
        }
        process {
            executor = 'local'
            stageInMode = 'symlink'
            maxRetries = 0
            cache = 'lenient'
        }
    }
    slurm {
        executor {
            name = 'slurm'
            queueSize = 900
            pollInterval = '30 sec'
            queueStatInterval = '10m'
        }
        process {
            executor = 'slurm'
            stageInMode = 'symlink'
            // errorStrategy = 'retry'
            maxRetries = 0
            cache = 'lenient'
        }
    }
    hq {
        executor {
            name = 'hq'
            queueSize = 900
            pollInterval = '5 sec'
        }
        process {
            executor = 'hq'
            stageInMode = 'symlink'
            maxRetries = 0
            cache = 'lenient'
        }
    }
}
